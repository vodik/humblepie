#!/usr/bin/env bash
# vim: ft=sh sw=2 sts=2 et
###############################################################################
### thanks to:
### JavaAtom <faustian.merula@gmail.com>: filename generation for Introversion
### kevlarman <>: filenames for hib 1, 2
###
###############################################################################
## covered bundles:
##  4, 5, frozensynapse, introversion/1/2(maybe?)

## comments starting with a single octothorpe are experimental code
## more than one octothorpe signifies detail or instructional comments

asroot="${asroot:=0}"
automagic="${automagic:+0}"
hib_check_key="${hib_check_key:=1}"
md5prog="${md5prog:=md5sum}"
verbose=${verbose:-1}
rcdir="${XDG_CONFIG_HOME}/humblepie"

(( ! EUID )) && {
  ## check if they used root on purpose
  if  (( ! asroot )); then
    automagic=0
    ## if expected $rcfile doesn't exist, we're going to use /etc instead
    ## they're already root at this point, so further checking is moot
    [[ -f "${rcdir}/humblepie.rc" ]] || rcdir="/etc/humblepie"
  fi
}

## really need to figure this bitch out
## i have to set rcfile after verifying the directory is okay
## how about in the check_dir(), just set the bastard
## i intend to run check_dir() for _every_ invocation
# rcfile="$rcdir/humblepie.rc"
if [[ -r "$rcfile" ]]; then
  . "$rcfile"
elif [[ -f "$rcfile" ]]; then
  echo "Bad permissions on $rcfile!"
else
  echo "No config file detected!"
fi

## brilliant idea, if gettext doesn't exist just echo the args
## makepkg is some fantastic inspiration even if it's ugly
[[ ! -x "$(type -p gettext)" ]] && gettext() { echo "$@"; }
## if automagic is enabled let's setup a passthrough function
## check for automagic, turn on verbosity by default
if (( ! automagic )); then verbose=1; automage() { :; } 
else automagic() { false; } &>/dev/null; fi
## if verbose is on, define verbose(). if off, define broken()
## this way, testing for verbose is only done a single time
## probably a better way to do this, but we'll get around to it later
if (( ! verbose )); then
  ## i would like to incorporate some gettext action in here
  printf "%s\n\t%s\n\t%s\n" "Verbose reporting is on!" \
    "Run this program again with -x and -v to turn it off." \
    "Alternatively, use $rcfile to pre-configure for $USER."

  verbose() {
    ## verbose has no special return value associated with it
    ## sometimes we call it to print extra info
    ## sometimes it prints errors. return accordingly
    ## WARNING: return 2; ERROR: return 1; else return 0
    local info="$1"; shift
    printf "%s\t%s\n" "==> $(gettext "$info": "$@")"
  } >&2
  ## define this as false so i can do `broken && cmd` and cmd..
  ## .. only executes if verbose() { false; }; otherwise..
  ## .. i can do `broken || cmd` if necessary
  ## probably unnecessary to do
  broken() { false; } &>/dev/null
else
  broken() {
    ## broken() always returns 1 because we _probably_ want to exit 
    local mess="$1"; shift
    printf "%s\n\t%s\n" "==> $(gettext "Something is wrong..." \
      "Try again with -v\n" "PROBLEM: $mess" "$@")"
    return 1
  } >&2
  ## same applies here as did to broken() { false; }
  ## again, likely unnecessary
  verbose() { false; } &>/dev/null
fi

inarray() {
  local n="$1" a="$2"; shift 2
  for $a; do 
    [[ "$n" == "$a" ]] && return
  done
  return 1
}

check_key() {
  ## grab the key
  # local k="$1" ret=0
  ## declare the array for keys
  declare -a bundlekeys
  ## expand all $hibkey_* variables from rcfile if they are set
  ## the quotes and @ are important for proper expansion
  for var in "${!hibkey_@}"; do
    ## this is an indirect expansion to test if any $hibkey_* expanded
    ## ${!var} will equal the value of each $hibkey_* in turn
    ## if hibkey_foo="barbazquux" then ${!var} expands to "barbazquux"
    ## $var would be "hibkey_foo"
    ## ["hibkey_foo"]="barbazquux"
    # bundlekeys+=( ["${var##*_}"]="${!var}" ) 
    # if [[ ${!bundlekeys@} ]]; then
    ## only populate array if there is a key defined
    [[ "${!hibkey_@}" ]] 
    bundlekeys+=( "$var" ) || {
      ## if no key found, cry
      broken "No keys discovered."
      verbose "ERROR" "No keys configured.\n" \
        "\tPlease specify a key with -k [key] or in your user's config file."
      return 1
    }
    verbose "INFO" "${#bundlekeys[@]} found!"
  done
}

## i think this can be rewritten with non-short-circuit ;;& case
check_dir() {
  local d
  ## loop over args, we'll just call this 1 time per run
  for d in "$@"; do
  ## make sure it's a directory
    if [[ -d "$d" ]]; then
      ## make sure it is r/w, or cry about it
      [[ -r "$d" && -w "$d" ]] || {
        broken "Bad directory." ||
          verbose "ERROR" "$d does not exist or you lack permissions!"
        ## if automagic, and current dir is writable, use it
         automagic && {
          [[ -r "$PWD" && -w "$PWD" ]] || {
            broken "$PWD is not r/w." || { 
              verbose "ERROR" \
                "$PWD must be r/w to enable automagic to continue.\n" \
                "\tRun this script in a directory you have permissions in, " \
                "or setup your config file appropriately."
              return 1
              }
          }
            ## $d will be one of these at a time
            ## case will find this setting and convert $d to the one i need
            ## when a match is found, the case ends for this iteration of loop
            case "$d" in
              hib_dir)
                d="$PWD/humbleindiebundle/"
                verbose "INFO" "Using $hib_dir instead..."
                hib_dir="$d"
                ;;&
              hib_torrent_dir)
                d="$PWD/humbleindiebundle/torrents/"
                hib_torrent_dir="$d"
                verbose "INFO" "Using $hib_torrent_dir instead..."
                ;;&
              rcdir)
                d="$PWD/humblepie"
                rcdir="$d"
                verbose "INFO" "Using $rcdir instead..."
                rcfile="$rcdir/humblepie.rc"
                [[ -f "$rcfile" ]] ||
                ;;&
              *)
                verbose "ERROR" "Pass a proper value for \$d."
                return 1
                ;;
            esac
            ## $d does not get clobbered because the loop runs fully per arg
            ## and case short-circuits at the first match
            mkdir -p "$d" 
          }
      }
    else
      broken "Unspecified directory." ||
        verbose "ERROR" "No download directory specified."
      return 1
    fi
done
}

check_sum() {
  local game="$1"
  local list="$2"
  md5="$("$md5prog" <"$game")"
  ## md5sum has a really irritating habit to print "cksum   filename"
  ## strip everything from first space to end of var
  md5="${md5%% *}"
  while read -r sum; do
    ## capitalize all the characters and match them
    ## can't guarantee mixed case will ever match
    ## it appears some implementations of md5sum print all lower or all upper
    [[ ${md5^^} == "${sum^^}" ]] && return
  done <$list
  broken "No matching md5 checksum." ||
    verbose "WARNING" "The md5 checksum for the game did not match " \
      "any checksums in $list.\n" \
      "\tVerify it manually or try updating it with -U."
}

generate_list() {
  ## send the value of the chosen $hibkey_*; the rest is automagic
  local key="$1"
  local file="${hib_bundle}-${USER}.txt"
  local link="$3"
  ## trying to save these files to avoid redownloading
  ## this is a list of raw filenames and should be grabbed in 2 cases:
  ## if this file does not already exist, grab it
  ## if the updater is run, grab all the files again
  ## clobber these file, the old version is always useless
  

  ## example format of md5sums
  ## md5sums = www.foo.com/downloads?key=${key}#734c973b6095c56c4866c0bf8bf8a410 
  links -html-numbered-links 1 \
    -dump https://www.humblebundle.com/downloads\?key\="${key}"|grep '#'>sums.txt
  sums="$(<sums.txt)"
  while read -r sums; do
    # sed -e -r 's/#\s*$//'
    sums+=("${sums%%# }")
  done
  echo "${sums}"
  echo "${sums[@]}"


  ## quick and dirty way to grab a complete list of files
  # [[ ! -r $file ]] && links -html-numbered-links 1 \
  #   -dump "$filelistlink" | grep files | grep -v webseed |
  #   cut -d'/' -f4 | cut -d'?' -f1 > "$file"
  ## this list is multipurpose
  declare -a list
  while read -r line; do
    list+=( "$line" )
  done <$file
  ## generate a numbered list
  ## ${#list[@]} is the number of elements in the array 'list'
  for (( i=1; i<"${#list[@]}"; i++ )); do
    ## print the list, prefixed with numbers, starting from 1 instead of 0
    printf "%s\t%s\n" "${i}." "${list[$i-1]}"
  done
}
