#!/usr/bin/env bash
# vim: ft=sh sw=2 sts=2 et
###############################################################################
### v0.2
### Copyright (c) 2012 Josh McGee
### 
### Permission is hereby granted, free of charge, to any person obtaining a 
### copy of this software and associated documentation files (the "Software"),
### to deal in the Software without restriction, including without limitation 
### the rights to use, copy, modify, merge, publish, distribute, sublicense, 
### and/or sell copies of the Software, and to permit persons to whom the 
### Software is furnished to do so, subject to the following conditions:
### 
### The above copyright notice and this permission notice shall be included in 
### all copies or substantial portions of the Software.
### 
### THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
### IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
### FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
### THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
### LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
### FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
### DEALINGS IN THE SOFTWARE.
###
###############################################################################

## comments starting with a single octothorpe are experimental code
## more than one octothorpe signifies detail or instructional comments


## extglob is useful for matching with @()
shopt -s extglob

## make gettext() a no-op if the binary is not executable
[[ ! -x "$(type -p gettext)" ]] && gettext() { echo -e "$@"; }
## if verbose is on, define verbose(). if off, define broken()
## this way, testing for verbose is only done a single time
## probably a better way to do this, but we'll get around to it later
messaging() {
  if (( verbose > 0 )); then
    ## i would like to incorporate some gettext action in here
    printf "$(gettext "Verbose reporting is on!\n \
      \tRun this program again with -x and -v to turn it off.\n \
      \tAlternatively, use $rcfile to pre-configure for $USER.")"

    verbose() {
      ## verbose has no special return value associated with it
      ## WARNING: return 2; ERROR: return 1; else return 0
      printf "==> $(gettext "$1": "${@:2}")\n"
    } >&2
    broken() { false; } &>/dev/null
  else
    broken() {
      ## broken() always returns 1 because we _probably_ want to exit 
      printf "==> $(gettext Something is wrong...\n \
        \tTry again with -v\n \
        \tPROBLEM: "$1" "${@:2}")\n"
      return 1
    } >&2
    verbose() { false; } &>/dev/null
  fi
}

check_root() {
  (( EUID == 0 )) && {
    ## check if they used root on purpose
    if  (( asroot > 0 )); then
      verbose="1"; exit
      ## they're already root at this point, so further checking is moot
      dir_rc="/etc/humblepie"
    fi
  }
}

check_files () {
  check_root
  check_dir
  rcfile="${dir_rc%/}/humblepie.rc"
  if [[ -r "$rcfile" ]]; then
    . "$rcfile"
  else
    [[ -w "${dir_rc%/}" ]] && cat >&1 >"$rcfile" <<'EOF'
# hibkey_1="foobar"
# hibkey_2="foobar"
# hibkey_3="foobar"
# hibkey_4="foobar"
# hibkey_5="foobar"
# hibkey_android1="foobar"
# hibkey_android2="foobar"
# hibkey_botanicula="foobar"
# hibkey_frozenbyte="foobar"
# hibkey_frozensynapse="foobar"
# hibkey_introversion="foobar"
# hibkey_mojang="foobar"
# hibkey_voxatron="foobar"

# dir_hib="${HOME}/humbleindiebundle"
# dir_hib_torrent="${dir_hib}/torrents"
## set these to 1 to enable
## allow running as root (for systemwide installations)
asroot=0
## test key for validity
check_key=1
## check md5sum of downloads
check_md5=1
## spit out more detailed info, warnings, and errors
verbose=0
## turn on automatic checking/downloading updates
# update=0
EOF
  echo "Created default config in ${dir_rc%/}" && exit 0
  fi
}

check_dir() {
  if [[ "$XDG_CONFIG_HOME" ]]; then
    dir_rc="${XDG_CONFIG_HOME}/humblepie"
  else
    dir_rc="${HOME}/.config/humblepie"
  fi
  case "${!dir_@}" in
    dir_hib)
      [[ -d "${dir_hib%/}" && -w "${dir_hib%/}" ]] || {
        d="${HOME}/humbleindiebundle"
        verbose "INFO" "Using $d instead..."
        dir_hib="$d"
      } ;;&
    dir_hib_torrent)
      [[ -d "${dir_hib_torrent%/}" && -w "${dir_hib_torrent%/}" ]] || {
        d="${HOME}/humbleindiebundle/torrents"
        verbose "INFO" "Using $d instead..."
        dir_hib_torrent="$d"
      } ;;&
    dir_rc)
      [[ -d "$dir_rc" && -w "$dir_rc" ]] || {
        d="${HOME}/.config/humblepie"
        verbose "INFO" "Using $d instead..."
        dir_rc="$d"
        rcfile="$dir_rc/humblepie.rc"
      } ;;
  esac
  for d in "${!dir_@}"; do
    [[ -d "$d" ]] && mkdir -p "$d" 
  done
}

## kudos to Riviera on #bash for help with this one o/
generate_list() {
  unset IFS links sums fnames cksums
  local game pattern; declare -Ag links; declare -ag list
  ## needs to start with http obviously, then...
  ## ...strip out the ugly ubuntu link because lolcoupons...
  ## ...and only use links with key= in them
  # pattern+='http!(*ubuntu*)key=*'
  while read -r link; do
    ## check the line, make sure it's a proper link, then add it to list
    link="${link#* }"
    # [[ "$link" == $pattern ]] ## seems to strip important links =[
    list+=("$link")
        ## read in the links dump
  done < <(links -html-numbered-links 1 -dump \
            "https://www.humblebundle.com/downloads?key=${hib_key}")
  for l in "${list[@]}"; do
    [[ "$l" == *files* ]] && {
      file="${l#*files*/}"
      ## strip everything after '?key=' to get a filename
      file="${file%%\?*}"
      links["$file"]="$l"
    }
  done
}

auto_dl_game () {
  declare -ag downloads; declare -A dest
  if [[ "$hib_game" ]]; then 
    downloads[0]="$hib_game"
    dest["$hib_game"]="${dir_hib}/$hib_game"
  else
    PS3="Select a file by number, 0 to continue: "
    select choice in "${!links[@]}"; do
      [[ "$choice" ]] || break
      ## store each choice in an array
      downloads+=("$choice")
      ## now populate this associative array last using index of ${downloads[@]}
      dest[$choice]="${dir_hib}/${downloads[@]:(-1)}"
    done
  fi
  ## loop through the choices
  for f in "${downloads[@]}"; do
    ## make sure the game doesn't already exist
    if [[ -f "${dest[$f]}" ]]; then
      verbose "WARNING" "$f already exists! Skipping..."
    else
      ## then download it!
      verbose "INFO" "Downloading $f..."
      curl -# -o "${dest[$f]}" "${links[$f]}" &&
        verbose "INFO" "Finished downloading ${f}!"
    fi
  done
  (( check_md5 )) && check_sum
}

check_sum() {
  local md5; declare -a sums
  for l in "${list[@]}"; do
    [[ "$l" == *downloads*#* ]] && {
      cksum="${l#*#}"
      [[ "$cksum" ]] && sums+=("$cksum")
    }
  done
  for file in "${downloads[@]}"; do
    ## store the md5 hash
    md5="$(md5sum <"${dir_hib%/}/$file")"
    ## md5sum has a really irritating habit to print "cksum   filename"
    ## strip everything from first space to end of var
    md5="${md5%% *}"
    ## can't guarantee mixed case will ever match
    ## capitalize everything, sums may be mixed case (i think)
    ## potential to result in flawed success?
    ## without case modification, potential for false negatives?
    for sum in "${sums[@]}"; do
      [[ "${md5^^}" == "${sum^^}" ]] && {
        verbose "INFO" "The md5 for $g is okay!"
        break
      }
    done
      # broken "Checksums did not match." ||
      #  verbose "INFO" "The md5 for $g ($md5) did not match $sum"
  done
}

run() {
asroot="${asroot:=0}"
check_files
OPTIND=1
while getopts "b:d:g:i:k:t:chrvV" opt; do
  [[ "$opt" == '?' ]] && echo "Missing arguments." && exit 1
  case "$opt" in
    b) ## just pick the bundle with the rcfile
      hib_key="hibkey_$OPTARG"
      hib_key="${!hib_key}"
      ;;
    c) ## check_game should verify md5
      check_md5=1
      ;;
    d) ## set the download/game dir
      unset dir_hib
      dir_hib="${OPTARG%/}"
      ;;
    g) ## pick a game to download
      hib_game="$OPTARG"
      ;;
    h\?) ## print usage
      ;;
    # i) ## not implemented
    #   dir_install="${OPTARG}"
    #   ;;
    k) ## specify a key manually
      unset hib_key
      hib_key="$OPTARG"
      ;;
    # m) ## set download method; not implemented
    #   case "${OPTARG}" in
    #     t|torrent) dl_method="torrent"
    #       ;;
    #     h|http) dl_method="http"
    #       ;;
    #   esac
    #   ;;
    r) ## turn on root, for systemwide installs
      asroot=1
      ;;
    # t) ## set the hib_torrent_dir; not implemented
    #   hib_torrent_dir="${OPTARG}"
    #   ;;
    v) ## enable verbosity
      verbose=1
      ;;
    V) ## print version info
      ;;
  esac
done
generate_list
auto_dl_game
}

run "$@"
