#!/usr/bin/env bash
###############################################################################
### thanks to:
### JavaAtom <faustian.merula@gmail.com>: filename generation for Introversion
###
###
###############################################################################
## covered bundles:
##  4, 5, frozensynapse, introversion(maybe?)
OPTIND=1
rcfile="${XDG_CONFIG_HOME}/humblepie.rc"
[[ -f "${rcfile}" ]] && . "${rcfile}"


## options
# -a [architecture]: 32, 64
# -b [bundle]: which bundle to use
# -c: check_sum the game, optional
# -d [path]: directory where game should exist
# -g [game]: which game to perform work on
# -h: print usage
# -i [dir]: install game into specified directory
# -k [key]: set HiB key
# -t [path]: directory where torrent files should exist
# -v: verbosity
# need something for specifying system to determine which download to grab
# allow systemwide installs as root

while getopts "vha:b:cd:g:i:k:t:" opt; do
  case "$opt" in
    a) ## send to a function to set the right arch
      ### there is no convention in the downloads so...
      ### i have to depend on gamename to sanitize it
      hibarch="${OPTARG}"
      ;;
    b) ## set the bundle to check_ for key
      hibundle="hib_${OPTARG}_key"
      check_key
      ;;
    c) check_sum="y"
    d) ## set the download/game dir
      hibdir="${OPTARG}"
      check_dir "${hibdir}"
      ;;
    g) ## do the game stuff; probably _check_game && _dlgame
      hibgame="${OPTARG}"
      ;;
    h) ## print usage
      ;;
    i) installdir="${OPTARG}"
      ;;
    k) 
    t) ## set the .torrent dir
      hibtorrentdir="${OPTARG}"
      check_dir "${hibtorrentdir}"
      ;;
    v) verbose="y"
      ;;
  esac
done

check_key() {
  local k
  k="hibundle"
  for v in "${!bundlekeys[@]}"; do
    if [[ "${v}" == "${!k}" ]]; then
      hibkey="${v}"
      # check_bundle
    else
      error "${!k} was not found!"
    fi
  done
}

check_arch() {
  [[ -n "${hibarch}" && "${hibarch}" == "32" || "${hibarch}" == "64" ]] || {
    if [[ "$(uname -m)" =~ "i.86" ]]; then
      hibarch="32"
    else
      hibarch="64"
    fi
}

}

check_dir() {
  directory="$1"
  if [[ -n "${directory}" ]]; then
    [[ -w "${directory}" ]] || {
      [[ -n "${verbose}" ]] && {
        warning "${directory} does not exist or is not writable!"
      } || {
      broken
      }
    }
  elif [[ -z "${directory}" ]]; then
    [[ -n "${verbose}" ]] && {
      warning "No download directory specified."
      warning "Using current directory instead..."
    } 
    directory="$PWD"
  fi
}

warning() {
  local mesg="$1"; shift
  printf "==> $(gettext "WARNING:") ${mesg}\n" "$@" >&2
}

error() {
  local mesg="$1"; shift
  printf "==> $(gettext "ERROR:") ${mesg}\n" "$@" >&2
  exit 1
}

broken() {
  echo "Something's wrong..."
  echo "Try again with -v."
  exit 1
}

# check_bundle() {
#   case "${hibkey}" in
#     ## set my important values to variables and kick to the downloader
#     hib1key) hib1;;
#     hib2key) hib2;;
#     hib3key) hib3;;
#     hib4key) hib4;;
#     hib5key) hib5;;
#     hibandroid1key) hibandroid1;;
#     hibandroid2key) hibandroid2;;
#     hibbotaniculakey) hibbotanicula;;
#     hibfrozenbytekey) hibfrozenbyte;;
#     hibfrozensynapsekey) hibfrozensynapse;;
#     hibintroversionkey) hibintroversion;;
#     hibmojamkey) hibmojam;;
#     hibvoxatronkey) hibvoxatron;;
#   esac
# }

# vim: ft=sh sw=2 sts=2 et
