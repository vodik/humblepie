#!/usr/bin/env bash
###############################################################################
### thanks to:
### JavaAtom <faustian.merula@gmail.com>: filename generation for Introversion
###
###
###############################################################################
## covered bundles:
##  4, 5, frozensynapse, introversion(maybe?)
OPTIND=1
rcfile="${XDG_CONFIG_HOME}/humblepie.rc"
[[ -f "${rcfile}" ]] && . "${rcfile}"


## options
# -a [architecture]: 32, 64
# -b [bundle]: which bundle to use
# -c: check_sum the game, optional
# -d [path]: directory where game should exist
# -g [game]: which game to perform work on
# -h: print usage
# -i [dir]: install game into specified directory
# -k [key]: set hib_key
# -s [time]: time, in minutes, to seed the torrent after download
# -t [path]: directory where torrent files should exist
# -v: verbosity
# -V: print version
# need something for specifying system to determine which download to grab
# allow systemwide installs as root

while getopts "a:b:cd:g:i:k:s:t:hnvV" opt; do
  case "$opt" in
    a) ## check_arch will make sure i get a value i can work with
      hib_arch="${OPTARG}"
      ;;
    b) ## check_key should successfully verify that keys match
      hib_bundle="hib_${OPTARG}_key"
      ;;
    c) ## check_game should verify md5, not implemented
      check_sum="y"
      ;;
    d) ## set the download/game dir
      hib_dir="${OPTARG}"
      ;;
    g) ## this should just store the game name
      ## for now, i plan to have another function that kicks off the rest
      hib_game="${OPTARG}"
      ;;
    h\?) : ## print usage
      ;;
    i) install_dir="${OPTARG}"
      ;;
    k) : ## specify a key manually
      ;;
    n) : ## not implemented, maybe never will
      # interactive="y"
      ;;
    t) ## set the download type
      case "${OPTARG}" in
        ## i can check for lots of binaries here, maybe. fuck that.
        t|torrent) dl_method="torrent"
          ;;
        h|http) dl_method="http"
          ;;
      esac
      ;;
    s) seed_torrent="y"
      seed_time="${OPTARG}"
    v) verbose="y"
      ;;
    V) : ## print version info
      ;;
    x) automagic="y"
      ;;
  esac
done

[[ "${automagic}" == "y" ]] && verbose=y

if [[ ${verbose} == "y" ]]; then
  verbose() {
      local info="$1"; shift
      declare -a mesg
      for a in "$@"; do
        mesg+=("$a")
      done
      printf "%s\t%s\n" "==> $(gettext "${info}":)" "${mesg[@]}"
  } >&2
  broken() {
    :
  } &>/dev/null
else
  verbose() {
    :
  } &>/dev/null
  broken() {
    local info="$1"; shift
    printf "%s\n\t%s\n" "==> Something is wrong..." \
      "Try again with -v or set verbose=\"y\" in ${rcfile}\n" \
      "PROBLEM: ${info[@]}" "$@"
    exit 1
  } >&2
fi

check_key() {
  local k
  k="hib_bundle"
  [[ -z "${!k}" ]] && {
    broken "No key found."
    verbose "ERROR" "hib_bundle is not specified.\n" \
      "\tSpecify the bundle you would like to use with -b [bundle]"
    exit 1
  }
    for v in "${!bundlekeys[@]}"; do
      [[ "${v}" == "${!k}" ]] && {
        hib_key="${v}"
        # check_bundle
      }
    done
}

check_arch() {
  if [[ -n "${hib_arch}" ]]; then
    [[ "${hib_arch}" =~ "i.86" || "${hib_arch}" == "x86_64" ]] || {
      broken "Bad architecture."
      verbose "WARNING" "Invalid value for hib_arch.\n" \
        "\tValid values are i386, i686, x86_64" \
        "\t\`uname -m\` should return the correct information."
      [[ "${automagic}" == "y" ]] && {
        hib_arch="$(uname -m)"
        verbose "INFO" "Using ${hib_arch} instead..."
      }
    }
  else 
    broken "Specify hib_arch."
    verbose "WARNING" "hib_arch has not been specified.\n" \
      "\tPlease set hib_arch in ${rcfile} " \
      "or specify it with -a \`uname -m\`"
    [[ "${automagic}" == "y" ]] && {
      hib_arch="$(uname -m)"
      verbose "INFO" "Using ${hib_arch} instead..."
    }
  fi
}

check_dir() {
  directory="$1"
  if [[ -d "${directory}" ]]; then
    [[ -w "${directory}" ]] || {
      broken "Bad directory."
      verbose "WARNING" "${directory} does not exist or is not writable!"
      [[ "${automagic}" == "y" && -w "$PWD"]] && {
        case "$1" in
          hib_dir) hib_dir="$PWD/humbleindiebundle/"
            verbose "INFO" "Using ${hib_dir} instead..."
            directory="hib_dir"
          hib_torrent_dir) hib_torrent_dir="$PWD/humbleindiebundle/torrents/"
            verbose "INFO" "Using ${hib_torrent_dir} instead..."
            directory="hib_torrent_dir"
          *) verbose "ERROR" "$1 should only be hib_dir or hib_torrent_dir!"
        esac
        mkdir -p "${!directory}"
      }
    }
  else
    broken
    verbose "WARNING" "No download directory specified.\n" \
      "\tUsing current directory instead..."
    directory="$PWD"
  fi
}

_main() {
  check_arch "${hib_arch}"
  check_key "${hib_bundle}"
  check_dir "${hib_dir}"
  [[ "${dl_method}" == "torrent"  ]] && {
    check_dir "${hib_torrent_dir}"
  }
  sanitize_name
}

# sanitize_name() {
#   case "${hib_key}" in
#     ## use this to loop through the bundle arrays and start fuckin' shit up
#     ## set my important values to variables and kick to the downloader
#     hib_1_key) hib_1;;
#     hib_2_key) hib_2;;
#     hib_3_key) hib_3;;
#     hib_4_key) hib_4;;
#     hib_5_key) hib_5;;
#     hib_android1_key) hib_android1;;
#     hib_android2_key) hib_android2;;
#     hib_botanicula_key) hib_botanicula;;
#     hib_frozenbyte_key) hib_frozenbyte;;
#     hib_frozensynapse_key) hib_frozensynapse;;
#     hib_introversion_key) hib_introversion;;
#     hib_mojam_key) hib_mojam;;
#     hib_voxatron_key) hib_voxatron;;
#   esac
# }

# vim: ft=sh sw=2 sts=2 et
