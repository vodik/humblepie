#!/usr/bin/env bash
# vim: ft=sh sw=2 sts=2 et
###############################################################################
### thanks to:
### JavaAtom <faustian.merula@gmail.com>: filename generation for Introversion
### kevlarman <>: filenames for hib 1, 2
###
###############################################################################
## covered bundles:
##  4, 5, frozensynapse, introversion/1/2(maybe?)

## comments starting with a single octothorpe are experimental code
## more than one octothorpe signifies detail or instructional comments

dir_rc="${XDG_CONFIG_HOME}/humblepie"

(( ! EUID )) && {
  ## check if they used root on purpose
  if  (( ! asroot )); then
    verbose="1"
    ## if expected $rcfile doesn't exist, we're going to use /etc instead
    ## they're already root at this point, so further checking is moot
    [[ -f "${dir_rc}/humblepie.rc" ]] || dir_rc="/etc/humblepie"
  fi
}

asroot="${asroot:=0}"
check_key="${check_key:=1}"
check_md5="${check_md5:=1}"
md5prog="${md5prog:=md5sum}"
verbose=${verbose:-1}

check_dir
rcfile="$dir_rc/humblepie.rc"
if [[ -r "$rcfile" ]]; then
  . "$rcfile"
else
  [[ -w "$dir_rc" ]] && cat >"$rcfile" <<'EOF' # hibkey_1="foobar"
# hibkey_2="foobar"
# hibkey_3="foobar"
# hibkey_4="foobar"
# hibkey_5="foobar"
# hibkey_android1="foobar"
# hibkey_android2="foobar"
# hibkey_botanicula="foobar"
# hibkey_frozenbyte="foobar"
# hibkey_frozensynapse="foobar"
# hibkey_introversion="foobar"
# hibkey_mojang="foobar"
# hibkey_voxatron="foobar"

# dir_hib="${HOME}/humbleindiebundle"
# dir_hib_torrent="${dir_hib}/torrents"
## set these to 1 to enable
## allow running as root (for systemwide installations)
asroot=0
## test key for validity
check_key=1
## check md5sum of downloads
check_md5=1
## spit out more detailed info, warnings, and errors
verbose=0
## turn on automatic checking/downloading updates
# update=0
EOF
fi

## make gettext() a no-op if the binary is not executable
[[ ! -x "$(type -p gettext)" ]] && gettext() { echo "$@"; }
## if verbose is on, define verbose(). if off, define broken()
## this way, testing for verbose is only done a single time
## probably a better way to do this, but we'll get around to it later
if (( verbose )); then
  ## i would like to incorporate some gettext action in here
  printf "%s\n\t%s\n\t%s\n" "Verbose reporting is on!" \
    "Run this program again with -x and -v to turn it off." \
    "Alternatively, use $rcfile to pre-configure for $USER."

  verbose() {
    ## verbose has no special return value associated with it
    ## sometimes we call it to print extra info
    ## sometimes it prints errors. return accordingly
    ## WARNING: return 2; ERROR: return 1; else return 0
    local info="$1"; shift
    printf "%s\t%s\n" "==> $(gettext "$info": "$@")"
  } >&2
  ## define this as false so i can do `broken && cmd` and cmd..
  ## .. only executes if verbose() { false; }; otherwise..
  ## .. i can do `broken || cmd` if necessary
  ## probably unnecessary to do
  broken() { false; } &>/dev/null
else
  broken() {
    ## broken() always returns 1 because we _probably_ want to exit 
    local mess="$1"; shift
    printf "%s\n" "==> $(gettext "Something is wrong... \
      \n\tTry again with -v\n PROBLEM:" "$mess" "$@")"
    return 1
  } >&2
  ## same applies here as did to broken() { false; }
  ## again, likely unnecessary
  verbose() { false; } &>/dev/null
fi

check_key() {
  ## grab the key
  # local k="$1" ret=0
  ## declare the array for keys
  declare -A bundlekeys
  ## expand all $hibkey_* variables from rcfile if they are set
  ## the quotes and @ are important for proper expansion
  for var in "${!hibkey_@}"; do
    ## this is an indirect expansion to test if any $hibkey_* expanded
    ## ${!var} will equal the value of each $hibkey_* in turn
    ## if hibkey_foo="barbazquux" then $var expands to "barbazquux"
    ## $var would be "hibkey_foo"
    ## ["hibkey_foo"]="barbazquux"
    # bundlekeys+=( ["${var##*_}"]="${var}" ) 
    # if [[ ${!bundlekeys@} ]]; then
    ## only populate array if there is a key defined
    [[ "${!var}" == "${!hib_key}" ]] && {
      ## if no key found, cry
      # broken "No keys discovered."
      # verbose "ERROR" "No keys configured.\n" \
      #   "\tPlease specify a key with -k [key] or in your user's config file."
      # return 1
    ## i'm storing these in an array for possible re-use
      k="${!var}"
      h="${var##*_}"
      bundlekeys+=(["$k"]="$h") 
    }
  done
  verbose "INFO" "${#bundlekeys[@]} key found!"
}

check_dir() {
  if [[ "$XDG_CONFIG_HOME" ]]; then
    confdir="$XDG_CONFIG_HOME"
  else
    confdir="${HOME}/.config/humblepie"
  fi
  case "${!dir_@}" in
    dir_hib)
      [[ -d "$dir_hib" && -w "$dir_hib" ]] || {
        d="${PWD}/humbleindiebundle/"
        verbose "INFO" "Using $dir_hib instead..."
        dir_hib="$d"
      } ;;&
    # dir_hib_torrent)
    #   [[ -d "$dir_hib_torrent" && -w "$dir_hib_torrent" ]] || {
    #     d="${confdir}/humbleindiebundle/torrents/"
    #     dir_hib_torrent="$d"
    #     verbose "INFO" "Using $dir_hib_torrent instead..."
    #   } ;;&
    dir_rc)
      [[ -d "$dir_rc" && -w "$dir_rc" ]] || {
        d="${confdir}/humblepie"
        dir_rc="$d"
        verbose "INFO" "Using $dir_rc instead..."
        rcfile="$dir_rc/humblepie.rc"
      } ;;
  esac
  for d in "${!dir_@}"; do
    [[ "${d}" ]] || mkdir -p "$d" 
  done
}

generate_list() {
  ## unset for safety; declare an associative array
  unset IFS links; declare -Ag links sums
  capture=0
  while read -r key value; do
    # if ((capture == 1)); then
      ## check the line, make sure it's a proper link
      [[ "$value" = http://files.humblebundle.com/* ]] && {
        game="${value#http://files.humblebundle.com/}"
        ## strip everything after '?key=' to get a filename
        game="${game%%\?*}"
        links["$game"]="$value"
        md5="${game##*#}"
        sums["$game"]="$md5"
      }
    # else capture=1
    # fi
    ## read in the links dump
  done < \
    <(links -html-numbered-links 1 \
            -dump \
            "https://www.humblebundle.com/downloads?key=$1")
}

dl_game () {
  select choice in "${!links[@]}" quit; do
    [[ "$choice" = quit ]] && return
    dest="${dir_hib}/${choice}"
    if [[ -f "$dest" ]]; then
      echo "$choice already exists!"
    else
        curl -s -o "${dir_hib}/${choice}" "${links[$choice]}" 2>/dev/null
      (( "$check_md5" )) && check_sum "$choice"
    fi
  done
}

check_sum() {
  local game="$1"
  md5="$("$md5prog" <"$game")"
  ## md5sum has a really irritating habit to print "cksum   filename"
  ## strip everything from first space to end of var
  md5="${md5%% *}"
  ## capitalize all the characters and match them
  ## can't guarantee mixed case will ever match
  ## capitalize everything, sums may be mixed case (i think)
  ## potential to result in flawed success?
  ## without case modification, potential for false negatives?
  sum="${sums["$game"]}"
  sum="${sum^^}"
  md5="${md5^^}"
  (( sum = md5 )) || {
  broken "No matching md5 checksum." || {
    verbose "WARNING" "The md5 checksum for the game did not match " \
      "any checksums in $list.\n" \
      "\tVerify it manually or try updating it with -U."
    }
  }
}

hib_key="hibkey_$1"
check_key "$hib_key"
hib_bundle="${hib_key}"
cd "$dir_hib"
generate_list "${!hib_key}"
dl_game
